from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
import random

API_TOKEN = "8428577175:AAHgRq-G99IHfqhuW92YWlZFycwYYgKn458"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_data = {}

QUESTIONS = {
    "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –§–û–ü": [
        {"question": "–Ø–∫–∏–π –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –§–û–ü?",
         "options": ["–ü–æ–¥–∞—Ç–∏ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å", "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ –¶–ù–ê–ü", "–í—ñ–¥–∫—Ä–∏—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫", "–û—Ç—Ä–∏–º–∞—Ç–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—é"],
         "answer": "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ –¶–ù–ê–ü",
         "explanation": "–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫ ‚Äî —Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ñ—ñ–∑–∏—á–Ω–æ—ó –æ—Å–æ–±–∏-–ø—ñ–¥–ø—Ä–∏—î–º—Ü—è –≤ –¶–ù–ê–ü –∞–±–æ –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ –î—ñ—é."},
        {"question": "–Ø–∫–∏–π –∫–æ–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –§–û–ü –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏?",
         "options": ["–ë—É–¥—å-—è–∫–∏–π, —è–∫–∏–π –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", "–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–¥—É –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ", "–¢—ñ–ª—å–∫–∏ 01.11", "–ù–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω"],
         "answer": "–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–¥—É –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ",
         "explanation": "–ö–í–ï–î –≤–∏–∑–Ω–∞—á–∞—î, —á–∏–º —Å–∞–º–µ –≤–∏ –∑–∞–π–º–∞—î—Ç–µ—Å—å, —Ç–æ–º—É –π–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±–∏—Ä–∞—Ç–∏ –∑–∞ –≤–∞—à–∏–º –≤–∏–¥–æ–º –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ."}
    ],
    "–ü–æ–¥–∞—Ç–∫–∏ —Ç–∞ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å": [
        {"question": "–©–æ —Ç–∞–∫–µ –ø–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—è?",
         "options": ["–©–æ–º—ñ—Å—è—á–Ω–∏–π –ø–ª–∞—Ç—ñ–∂", "–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø—Ä–æ –¥–æ—Ö–æ–¥–∏", "–õ—ñ—Ü–µ–Ω–∑—ñ—è –Ω–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å", "–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫"],
         "answer": "–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø—Ä–æ –¥–æ—Ö–æ–¥–∏",
         "explanation": "–î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è ‚Äî —Ü–µ –∑–≤—ñ—Ç, —è–∫–∏–π –ø–æ–¥–∞—î—Ç—å—Å—è –¥–æ –ø–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø—Ä–æ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏."},
        {"question": "–Ø–∫ —á–∞—Å—Ç–æ –§–û–ü 2 –≥—Ä—É–ø–∏ —Å–ø–ª–∞—á—É—î —î–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫?",
         "options": ["–©–æ–¥–Ω—è", "–©–æ–º—ñ—Å—è—Ü—è", "–©–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ", "–†–∞–∑ –Ω–∞ —Ä—ñ–∫"],
         "answer": "–©–æ–º—ñ—Å—è—Ü—è",
         "explanation": "–§–û–ü 2 –≥—Ä—É–ø–∏ —Å–ø–ª–∞—á—É—î —î–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫ —â–æ–º—ñ—Å—è—Ü—è –¥–æ 20 —á–∏—Å–ª–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è."}
    ],
    "–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –≥—Ä–∞–º–æ—Ç–Ω—ñ—Å—Ç—å": [
        {"question": "–©–æ —Ç–∞–∫–µ –±—é–¥–∂–µ—Ç?",
         "options": ["–ü–ª–∞–Ω –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç", "–ë–∞–Ω–∫", "–ü–æ–¥–∞—Ç–∫–æ–≤–∞", "–ö—Ä–µ–¥–∏—Ç"],
         "answer": "–ü–ª–∞–Ω –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç",
         "explanation": "–ë—é–¥–∂–µ—Ç ‚Äî —Ü–µ –ø–ª–∞–Ω, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏."},
        {"question": "–©–æ –æ–∑–Ω–∞—á–∞—î —Ç–µ—Ä–º—ñ–Ω '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è'?",
         "options": ["–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –ø–æ–∫—É–ø–∫–∏", "–í–∫–ª–∞–¥–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π –∑ –º–µ—Ç–æ—é –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫", "–í–∏–ø–ª–∞—Ç–∞ –ø–æ–¥–∞—Ç–∫—ñ–≤", "–î–∞—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π"],
         "answer": "–í–∫–ª–∞–¥–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π –∑ –º–µ—Ç–æ—é –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫",
         "explanation": "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó ‚Äî —Ü–µ —Å–ø–æ—Å—ñ–± –∑–±—ñ–ª—å—à–∏—Ç–∏ –∫–∞–ø—ñ—Ç–∞–ª, –≤–∫–ª–∞–¥–∞—é—á–∏ –≥—Ä–æ—à—ñ —É –±—ñ–∑–Ω–µ—Å, –∞–∫—Ü—ñ—ó —á–∏ —ñ–Ω—à—ñ –∞–∫—Ç–∏–≤–∏."}
    ]
}


# === –ö–ù–û–ü–ö–ò ===

def main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz")],
        [InlineKeyboardButton(text="üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É", callback_data="restart")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def category_keyboard():
    buttons = [[InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}")] for cat in QUESTIONS.keys()]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def answer_keyboard(options):
    buttons = [
        [InlineKeyboardButton(text=opt, callback_data=f"ans_{i}")]
        for i, opt in enumerate(options)
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)



@dp.message(Command("start"))
async def start_menu(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—é —É –±–æ—Ç—ñ SmartFOP! üéØ\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=main_menu_keyboard())


@dp.callback_query(lambda c: c.data == "start_quiz")
async def start_quiz(callback: types.CallbackQuery):
    user_data[callback.from_user.id] = {}
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:", reply_markup=category_keyboard())


@dp.callback_query(lambda c: c.data == "restart")
async def restart_quiz(callback: types.CallbackQuery):
    user_data[callback.from_user.id] = {}
    await callback.message.answer("–†–µ—Å—Ç–∞—Ä—Ç—É—î–º–æ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É! üîÑ\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=category_keyboard())


@dp.callback_query(lambda c: c.data == "help")
async def help_menu(callback: types.CallbackQuery):
    text = (
        "üß© *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω–∏ *–ü–æ—á–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É*.\n"
        "2Ô∏è‚É£ –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞–ø–∏—Ç–∞–Ω—å.\n"
        "3Ô∏è‚É£ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ 10 –∑–∞–ø–∏—Ç–∞–Ω—å.\n"
        "4Ô∏è‚É£ –ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞—î—à –ø–æ—è—Å–Ω–µ–Ω–Ω—è.\n"
        "5Ô∏è‚É£ –ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –ø–æ–±–∞—á–∏—à —Å–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        
        "–ù–∞—à —Å–∞–π—Ç - https://smartfop.byethost7.com/\n\n"
        "–£—Å–ø—ñ—Ö—ñ–≤! üí™"
    )
    await callback.message.answer(text, parse_mode="Markdown")


@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def choose_category(callback: types.CallbackQuery):
    category = callback.data[4:]
    questions = QUESTIONS[category]
    user_data[callback.from_user.id] = {
        'category': category,
        'questions': random.sample(questions, min(10, len(questions))),
        'current': 0,
        'score': 0
    }
    await send_question(callback.from_user.id)


async def send_question(user_id):
    data = user_data.get(user_id)
    if not data:
        return

    idx = data['current']
    questions = data['questions']

    if idx >= len(questions):
        await bot.send_message(
            user_id,
            f"üéâ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{data['score']}* –∑ *{len(questions)}*",
            parse_mode="Markdown",
            reply_markup=main_menu_keyboard()
        )
        return

    q = questions[idx]
    text = f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {idx + 1} –∑ {len(questions)}:\n\n{q['question']}"
    await bot.send_message(user_id, text, reply_markup=answer_keyboard(q['options']))


@dp.callback_query(lambda c: c.data.startswith("ans_"))
async def answer_question(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)
    if not data:
        await callback.answer("–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–µ–Ω–∞ –∞–±–æ –Ω–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–ª–∞.")
        return

    idx = data['current']
    questions = data['questions']

    if idx >= len(questions):
        await callback.answer("–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    selected_index = int(callback.data[4:])
    question = questions[idx]
    selected_answer = question['options'][selected_index]

    if selected_answer == question['answer']:
        data['score'] += 1
        text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\nüí° {question['explanation']}"
    else:
        text = (
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: *{question['answer']}*\n\n"
            f"üí° {question['explanation']}"
        )

    await bot.send_message(user_id, text, parse_mode="Markdown")
    data['current'] += 1
    await send_question(user_id)


if __name__ == "__main__":
    dp.run_polling(bot)
